package commands

import (
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/caseydavenport/cube-tools/pkg/flag"
	"github.com/caseydavenport/cube-tools/pkg/types"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

// Define a cobra command for parsing a single deck file.
var ParseDirectoryCmd = &cobra.Command{
	Use:   "parse-dir",
	Short: "Parse a directory of deck files",
	Run: func(cmd *cobra.Command, args []string) {
		// Verify input.
		if date == "" {
			logrus.Fatal("Must specify a date for the deck.")
		}
		if draftID == "" {
			logrus.Fatal("Must specify a draft ID for the deck.")
		}

		parseDeckDir(deckInputDir, fileType, date, draftID)
	},
}

func init() {
	// Add flags for the command to parse a directory of deck files.
	flags := ParseDirectoryCmd.Flags()
	flag.StringVarP(flags, &date, "date", "t", "DATE", "", "Date, in YYYY-MM-DD format")
	flag.StringVarP(flags, &deckInputDir, "deck-dir", "d", "DIR", "", "Directory containing deck files to parse.")
	flag.StringVarP(flags, &fileType, "filetype", "f", "TYPE", ".csv", "File type to look for in the deck-dir.")
	flag.StringVarP(flags, &prefix, "prefix", "p", "PREFIX", "", "Prefix to match in the deck file names. Stripped before parsing.")
	flag.StringVarP(flags, &draftID, "draft", "", "DRAFT", "", "Draft ID - used as the output directory")
}

// work represents a piece of parsing work to be done.
type work struct {
	player string
	path   string
}

func nameFromDeckFilename(filename string) string {
	nicknames := map[string]string{
		"jumms":      "james",
		"maserstorm": "dom",
		"phinsup":    "cara",

		"pawl noerros": "paul",
		"pawl nawwwis": "paul",

		"grrg": "greg",

		"jenjen": "jen",
		"jenno":  "jen",

		"pyrolol": "mattd",
	}
	trimmed := strings.ToLower(strings.TrimPrefix(strings.Split(filename, ".")[0], prefix))
	trimmed = strings.Split(trimmed, "_")[0] // Remove whatver suffix is on the filename.
	if name, ok := nicknames[trimmed]; ok {
		return name
	}
	return trimmed
}

func parseDeckDir(deckDir, fileType, date, draftID string) {
	logc := logrus.WithFields(logrus.Fields{
		"directory": deckDir,
		"filetype":  fileType,
	})

	// Make sure the output directory exists.
	outdir := fmt.Sprintf("data/polyverse/%s", date)
	err := os.MkdirAll(outdir, os.ModePerm)
	if err != nil {
		panic(err)
	}

	// Gather files to load.
	files := []work{}

	// Load files from CSV dir.
	fileNames, err := os.ReadDir(deckDir)
	if err != nil {
		panic(err)
	}
	for _, f := range fileNames {
		// Skip some well-known files that we never want to process.
		if strings.Contains(f.Name(), "cubecobra.txt") {
			// These are generated by this tool and should just be skipped.
			continue
		}
		if prefix != "" && !strings.HasPrefix(f.Name(), prefix) {
			// Skip files that don't match the prefix, if specified.
			continue
		}
		if strings.HasSuffix(f.Name(), fileType) {
			// Add the file, using the file name as the player name (minus the filetype)
			files = append(files, work{
				player: nameFromDeckFilename(f.Name()),
				path:   fmt.Sprintf("%s/%s", deckDir, f.Name()),
			})
		}
	}

	if len(files) == 0 {
		logc.Info("No files to process.")
		return
	}
	logc.WithField("num", len(files)).Info("Processing deck files.")

	// Track each non-basic card we see in the deck files. We'll use this to do a consistency check on the
	// draft to make sure all cards are present and accounted for.
	seen := map[string]int{}

	for _, f := range files {
		// Parse the deck.
		d, err := parseSingleDeck(f.path, f.player, labels, date, draftID)
		if err != nil {
			logc.WithError(err).WithField("file", f.path).Error("Failed to parse deck file.")
			continue
		}

		// If a deck has less than 40 cards in the mainboard, that likely indicates a
		// scan error or a deck that was not properly built.
		if len(d.Mainboard) < 40 {
			logc.WithFields(logrus.Fields{
				"file":      f.path,
				"mainboard": len(d.Mainboard),
			}).Warn("Deck has less than 40 cards in the mainboard, likely a scan error or incomplete deck.")
		}

		if d.PickCount() != 45 {
			logc.WithFields(logrus.Fields{
				"file": f.path,
			}).Warn("Deck does not have 45 cards total (main + side), likely a scan error, incomplete deck, or unusual draft format.")
		}

		// Mark the non-basic cards as seen.
		for _, c := range append(d.Mainboard, d.Sideboard...) {
			if c.IsBasicLand() {
				continue
			}
			// Increment the count of this card in the seen map.
			seen[c.Name]++
		}
	}
	logrus.WithField("num", len(seen)).Info("Total unique cards seen in deck lists.")

	snaptshotFilename := fmt.Sprintf("%s/cube-snapshot.json", outdir)
	if _, err := os.Stat(snaptshotFilename); err != nil {
		// Write the cube-snapshot file to the draft directory if it doesn't exist already.
		//
		// This ensures we have a snapshot of the cube as it was on this date
		// for historical tracking and comparisons.
		// TODO: This is a bit of a hack, and assumes this command is being run
		// within the root of this project. That's OK for now since I am the only user.
		cmd := exec.Command("cp", "data/polyverse/cube.json", snaptshotFilename)
		if err := cmd.Run(); err != nil {
			panic(err)
		}
	}

	// Load the cube snapshot and count the number of unique cards we expect to see.
	cube, err := types.LoadCube("data/polyverse/cube.json")
	if err != nil {
		logc.WithError(err).Fatal("Failed to load cube snapshot.")
	}
	// Count the number of unique cards in the cube (and track duplicates).
	cubeCards := map[string]int{}
	for _, c := range cube.Cards {
		cubeCards[c.Name]++
	}
	logc.WithField("num", len(cubeCards)).Info("Total unique cards in cube snapshot.")

	// Expect each seen card to match the count in the cube snapshot.
	for name, count := range seen {
		if c, ok := cubeCards[name]; ok {
			if count != c {
				logc.WithFields(logrus.Fields{"name": name, "seen": count}).Error("Card count mismatch between seen decks and cube snapshot.")
			}
		} else {
			logc.WithField("name", name).Error("Card seen in decks but not in cube snapshot.")
		}
	}
	// Expect each card in the cube snapshot to be seen the correct number of times.
	for name, count := range cubeCards {
		if c, ok := seen[name]; ok {
			if count != c {
				logc.WithFields(logrus.Fields{"name": name, "expected": count}).Error("Card count mismatch between cube snapshot and seen decks.")
			}
		} else {
			logc.WithField("name", name).Error("Card in cube snapshot but not seen in decks.")
		}
	}
}
