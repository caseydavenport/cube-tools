package commands

import (
	"crypto/sha256"
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/caseydavenport/cube-tools/pkg/flag"
	"github.com/caseydavenport/cube-tools/pkg/types"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

// Define a cobra command for parsing a single deck file.
var ParseDirectoryCmd = &cobra.Command{
	Use:   "parse-dir",
	Short: "Parse a directory of deck files",
	Run: func(cmd *cobra.Command, args []string) {
		// Verify input.
		if date == "" {
			logrus.Fatal("Must specify a date for the deck.")
		}
		if draftID == "" {
			logrus.Fatal("Must specify a draft ID for the deck.")
		}

		parseDeckDir(deckInputDir, fileType, date, draftID)
	},
}

var anon bool

func init() {
	// Add flags for the command to parse a directory of deck files.
	flags := ParseDirectoryCmd.Flags()
	flag.StringVarP(flags, &date, "date", "t", "DATE", "", "Date, in YYYY-MM-DD format")
	flag.StringVarP(flags, &deckInputDir, "deck-dir", "d", "DIR", "", "Directory containing deck files to parse.")
	flag.StringVarP(flags, &fileType, "filetype", "f", "TYPE", ".csv", "File type to look for in the deck-dir.")
	flag.StringVarP(flags, &prefix, "prefix", "p", "PREFIX", "", "Prefix to match in the deck file names. Stripped before parsing.")
	flag.StringVarP(flags, &draftID, "draft", "", "DRAFT", "", "Draft ID - used as the output directory")
	flag.BoolVarP(flags, &anon, "anonymous", "a", "", false, "If set, anonymize player names in the output files.")
}

// work represents a piece of parsing work to be done.
type work struct {
	player string
	paths  []string
}

func determinePlayer(filename string) string {
	nicknames := map[string]string{
		"jumms":      "james",
		"maserstorm": "dom",
		"phinsup":    "cara",

		"pawl noerros": "paul",
		"pawl nawwwis": "paul",

		"grrg": "greg",

		"jenjen": "jen",
		"jenno":  "jen",

		"pyrolol": "mattd",
	}
	trimmed := strings.ToLower(strings.TrimPrefix(strings.Split(filename, ".")[0], prefix))
	trimmed = strings.Split(trimmed, "_")[0] // Remove whatver suffix is on the filename.
	if name, ok := nicknames[trimmed]; ok {
		return name
	}
	return trimmed
}

// List of parse string matches to skip files when processing a directory.
var skipFiles = []string{
	"cubecobra.txt", // Generated by this tool, skip it.
}

func generateWork(deckDir, fileType string) (map[string]work, error) {
	// Mapping of player name to work item. This allows us to group multiple files
	// for the same player if needed - e.g., a main deck and a sideboard.
	workMap := map[string]work{}

	// Load files from CSV dir.
	fileNames, err := os.ReadDir(deckDir)
	if err != nil {
		return nil, err
	}
	for _, f := range fileNames {
		// Skip some well-known files that we never want to process.
		skip := false
		for _, s := range skipFiles {
			if strings.Contains(f.Name(), s) {
				skip = true
				break
			}
		}
		if skip {
			continue
		}

		if prefix != "" && !strings.HasPrefix(f.Name(), prefix) {
			// Skip files that don't match the prefix, if specified.
			continue
		}
		if strings.HasSuffix(f.Name(), fileType) {
			// Add the file, using the file name as the player name (minus the filetype)
			path := fmt.Sprintf("%s/%s", deckDir, f.Name())

			player := determinePlayer(f.Name())
			if anon {
				// Use a deterministic hash of the draft ID + player name to generate an anonymous player name.
				player = Anonymize(draftID, player)
			}

			// Check if we already have a work item for this player.
			if w, ok := workMap[player]; ok {
				// Append the path to the existing work item.
				w.paths = append(w.paths, path)
				workMap[player] = w
				continue
			}

			workMap[player] = work{
				player: player,
				paths:  []string{path},
			}
		}
	}

	return workMap, nil
}

func Anonymize(draftID, player string) string {
	logrus.WithFields(logrus.Fields{
		"draftID": draftID,
		"player":  player,
	}).Info("Anonymizing player name")

	h := sha256.New()
	h.Write([]byte(draftID))
	hashBytes := h.Sum(nil)
	draftIDPart := fmt.Sprintf("%x", hashBytes)[:4]
	logrus.WithField("draftPart", draftIDPart).Info("Draft ID part of anonymized name")

	h.Reset()
	h.Write([]byte(player))
	hashBytes = h.Sum(nil)
	playerPart := fmt.Sprintf("%x", hashBytes)[:4]

	// Combine parts of the draft ID and player hash to create an anonymous name.
	return fmt.Sprintf("player-%s-%s", draftIDPart, playerPart)
}

func parseDeckDir(deckDir, fileType, date, draftID string) {
	logc := logrus.WithFields(logrus.Fields{
		"directory": deckDir,
		"filetype":  fileType,
	})

	// Make sure the output directory exists.
	outdir := fmt.Sprintf("data/polyverse/%s", draftID)
	err := os.MkdirAll(outdir, os.ModePerm)
	if err != nil {
		logc.WithError(err).Fatal("Failed to create output directory.")
	}

	// Load work items from the directory.
	workMap, err := generateWork(deckDir, fileType)
	if err != nil {
		logc.WithError(err).Fatal("Failed to generate work from deck directory.")
	}

	// If no work to do, exit early.
	if len(workMap) == 0 {
		logc.Info("No files to process.")
		return
	}

	logc.WithField("numPlayers", len(workMap)).Info("Processing deck files.")

	// Track each non-basic card we see in the deck files. We'll use this to do a consistency check on the
	// draft to make sure all cards are present and accounted for.
	seenInDraft := map[string]int{}

	var errs []error
	var decks []*types.Deck
	for _, work := range workMap {
		// Parse the deck.
		d, err := parseDeck(work.paths, work.player, labels, date, draftID)
		if err != nil {
			logc.WithError(err).Error("Failed to parse deck file.")
			errs = append(errs, err)
			continue
		}
		decks = append(decks, d)

		// Mark the non-basic cards as seen.
		for _, c := range d.AllCards() {
			if c.IsBasicLand() {
				continue
			}
			// Increment the count of this card in the seen map.
			seenInDraft[c.Name]++
		}
	}
	logrus.WithField("num", len(seenInDraft)).Info("Total unique cards seen in deck lists.")

	// If we hit any errors, return now before we write out any files.
	if len(errs) > 0 {
		logc.WithField("numErrors", len(errs)).Error("Errors occurred while parsing decks, not writing output files.")
		return
	}

	// Wite out the cube snapshot to the draft directory.
	if err := writeCubeSnapshot(outdir); err != nil {
		logc.WithError(err).Error("Failed to write cube snapshot to draft directory.")
		return
	}

	// Check that the seen cards in the draft match the expected counts based on the latest cube snapshot.
	if err = checkDraftConsistency(logc, seenInDraft); err != nil {
		logc.WithError(err).Error("Draft consistency check failed, not writing output files.")
		return
	}

	// Finally, write out each deck file.
	for _, d := range decks {
		if err := writeDeck(d, draftID); err != nil {
			logc.WithError(err).WithField("player", d.Player).Error("Failed to write deck file.")
			return
		}
	}
}

func writeCubeSnapshot(outdir string) error {
	snaptshotFilename := fmt.Sprintf("%s/cube-snapshot.json", outdir)
	if _, err := os.Stat(snaptshotFilename); err != nil {
		// Write the cube-snapshot file to the draft directory if it doesn't exist already.
		//
		// This ensures we have a snapshot of the cube as it was on this date
		// for historical tracking and comparisons.
		// TODO: This is a bit of a hack, and assumes this command is being run
		// within the root of this project. That's OK for now since I am the only user.
		cmd := exec.Command("cp", "data/polyverse/cube.json", snaptshotFilename)
		if err := cmd.Run(); err != nil {
			return err
		}
	}
	return nil
}

// checkDraftConsistency checks that the seen cards in the draft match the expected counts based on the latest cube snapshot.
func checkDraftConsistency(logc *logrus.Entry, seenInDraft map[string]int) error {
	passed := true

	// Load the cube snapshot and count the number of unique cards we expect to see.
	cube, err := types.LoadCube("data/polyverse/cube.json")
	if err != nil {
		logc.WithError(err).Fatal("Failed to load cube snapshot.")
	}

	// Count the number of unique cards in the cube (and track duplicates).
	cubeCards := map[string]int{}
	for _, c := range cube.Cards {
		cubeCards[c.Name]++
	}
	logc.WithField("num", len(cubeCards)).Info("Total unique cards in latest cube snapshot.")

	// Expect each seen card to match the count in the cube snapshot.
	for name, count := range seenInDraft {
		if c, ok := cubeCards[name]; ok {
			if count != c {
				logc.WithFields(logrus.Fields{"name": name, "seen": count}).Error("Card count mismatch between seen decks and cube snapshot.")
				passed = false
			}
		} else {
			logc.WithField("name", name).Error("Card seen in decks but not in cube snapshot.")
			passed = false
		}
	}

	// Expect each card in the cube snapshot to be seen the correct number of times.
	for name, count := range cubeCards {
		if c, ok := seenInDraft[name]; ok {
			if count != c {
				logc.WithFields(logrus.Fields{"name": name, "expected": count}).Error("Card count mismatch between cube snapshot and seen decks.")
				passed = false
			}
		} else {
			logc.WithField("name", name).Error("Card in cube snapshot but not seen in decks.")
			passed = false
		}
	}

	if !passed {
		return fmt.Errorf("draft consistency check failed")
	}
	return nil
}
